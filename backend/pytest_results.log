============================= test session starts =============================
platform win32 -- Python 3.13.5, pytest-8.0.0, pluggy-1.6.0 -- C:\Users\muham\OneDrive\Desktop\Environments\SE_Project\backend\.venv\Scripts\python.exe
cachedir: .pytest_cache
rootdir: C:\Users\muham\OneDrive\Desktop\Environments\SE_Project\backend
configfile: pytest.ini
plugins: anyio-4.9.0, asyncio-0.23.5, cov-5.0.0, timeout-2.3.1
asyncio: mode=Mode.STRICT
collecting ... collected 71 items

tests/test_appointments.py::TestAppointments::test_create_appointment_valid_data PASSED [  1%]
tests/test_appointments.py::TestAppointments::test_create_appointment_missing_required_fields PASSED [  2%]
tests/test_appointments.py::TestAppointments::test_create_appointment_unauthorized PASSED [  4%]
tests/test_appointments.py::TestAppointments::test_get_appointment_by_id_nonexistent PASSED [  5%]
tests/test_appointments.py::TestAppointments::test_create_appointment_invalid_datetime PASSED [  7%]
tests/test_appointments.py::TestAppointments::test_update_appointment_valid_data PASSED [  8%]
tests/test_appointments.py::TestAppointments::test_delete_appointment_and_verify_gone PASSED [  9%]
tests/test_appointments.py::TestAppointments::test_appointment_complete_workflow PASSED [ 11%]
tests/test_doctors.py::TestDoctors::test_create_doctor_admin_authorized PASSED [ 12%]
tests/test_doctors.py::TestDoctors::test_create_doctor_missing_required_fields PASSED [ 14%]
tests/test_doctors.py::TestDoctors::test_create_doctor_patient_unauthorized FAILED [ 15%]
tests/test_doctors.py::TestDoctors::test_create_doctor_no_authentication PASSED [ 16%]
tests/test_doctors.py::TestDoctors::test_get_all_doctors_authenticated_users_only PASSED [ 18%]
tests/test_doctors.py::TestDoctors::test_get_all_doctors_unauthenticated_denied FAILED [ 19%]
tests/test_doctors.py::TestDoctors::test_get_doctor_by_id_authenticated_users_only PASSED [ 21%]
tests/test_doctors.py::TestDoctors::test_get_doctor_by_id_nonexistent PASSED [ 22%]
tests/test_doctors.py::TestDoctors::test_update_doctor_admin_authorized PASSED [ 23%]
tests/test_doctors.py::TestDoctors::test_update_doctor_patient_unauthorized FAILED [ 25%]
tests/test_doctors.py::TestDoctors::test_delete_doctor_patient_unauthorized FAILED [ 26%]
tests/test_doctors.py::TestDoctors::test_doctor_complete_admin_workflow PASSED [ 28%]
tests/test_emergency_contacts.py::TestEmergencyContacts::test_create_emergency_contact_valid_data PASSED [ 29%]
tests/test_emergency_contacts.py::TestEmergencyContacts::test_create_emergency_contact_missing_required_fields PASSED [ 30%]
tests/test_emergency_contacts.py::TestEmergencyContacts::test_create_emergency_contact_unauthorized PASSED [ 32%]
tests/test_emergency_contacts.py::TestEmergencyContacts::test_create_emergency_contact_max_limit_exceeded PASSED [ 33%]
tests/test_emergency_contacts.py::TestEmergencyContacts::test_get_emergency_contacts_by_user PASSED [ 35%]
tests/test_emergency_contacts.py::TestEmergencyContacts::test_update_emergency_contact_valid_data PASSED [ 36%]
tests/test_emergency_contacts.py::TestEmergencyContacts::test_delete_emergency_contact_and_verify_gone PASSED [ 38%]
tests/test_emergency_contacts.py::TestEmergencyContacts::test_sos_trigger_successful FAILED [ 39%]
tests/test_emergency_contacts.py::TestEmergencyContacts::test_sos_trigger_no_emergency_contacts PASSED [ 40%]
tests/test_emergency_contacts.py::TestEmergencyContacts::test_sos_trigger_sms_service_fails FAILED [ 42%]
tests/test_medicines.py::TestMedicines::test_create_medicine_valid_data_authenticated PASSED [ 43%]
tests/test_medicines.py::TestMedicines::test_create_medicine_missing_required_fields PASSED [ 45%]
tests/test_medicines.py::TestMedicines::test_create_medicine_unauthorized PASSED [ 46%]
tests/test_medicines.py::TestMedicines::test_create_medicine_invalid_date_format PASSED [ 47%]
tests/test_medicines.py::TestMedicines::test_get_medicines_by_user_authenticated PASSED [ 49%]
tests/test_medicines.py::TestMedicines::test_get_medicines_by_user_unauthorized_access_denied FAILED [ 50%]
tests/test_medicines.py::TestMedicines::test_update_medicine_valid_data PASSED [ 52%]
tests/test_medicines.py::TestMedicines::test_update_medicine_unauthorized PASSED [ 53%]
tests/test_medicines.py::TestMedicines::test_delete_medicine_and_verify_gone PASSED [ 54%]
tests/test_medicines.py::TestMedicines::test_medicine_complete_workflow PASSED [ 56%]
tests/test_medicines.py::TestMedicines::test_transcribe_audio_prescription_success FAILED [ 57%]
tests/test_medicines.py::TestMedicines::test_transcribe_audio_prescription_unauthorized PASSED [ 59%]
tests/test_medicines.py::TestMedicines::test_transcribe_invalid_file_format PASSED [ 60%]
tests/test_medicines.py::TestMedicines::test_transcribe_no_file_provided PASSED [ 61%]
tests/test_medicines.py::TestMedicines::test_transcribe_empty_audio_file FAILED [ 63%]
tests/test_medicines.py::TestMedicines::test_transcribe_ai_service_failure PASSED [ 64%]
tests/test_medicines.py::TestMedicines::test_transcribe_partial_medicine_info PASSED [ 66%]
tests/test_medicines.py::TestMedicines::test_transcribe_different_audio_formats FAILED [ 67%]
tests/test_documents.py::TestDocuments::test_create_document_valid_data PASSED [ 69%]
tests/test_documents.py::TestDocuments::test_create_document_missing_required_fields PASSED [ 70%]
tests/test_documents.py::TestDocuments::test_create_document_unauthorized PASSED [ 71%]
tests/test_documents.py::TestDocuments::test_get_documents_by_user_authenticated PASSED [ 73%]
tests/test_documents.py::TestDocuments::test_get_document_by_id_valid PASSED [ 74%]
tests/test_documents.py::TestDocuments::test_get_document_by_id_nonexistent PASSED [ 76%]
tests/test_documents.py::TestDocuments::test_update_document_valid_data PASSED [ 77%]
tests/test_documents.py::TestDocuments::test_update_document_unauthorized PASSED [ 78%]
tests/test_documents.py::TestDocuments::test_delete_document_and_verify_gone PASSED [ 80%]
tests/test_documents.py::TestDocuments::test_delete_document_unauthorized PASSED [ 81%]
tests/test_documents.py::TestDocuments::test_document_complete_workflow PASSED [ 83%]
tests/test_documents.py::TestDocuments::test_upload_without_authentication PASSED [ 84%]
tests/test_documents.py::TestDocuments::test_upload_with_invalid_session PASSED [ 85%]
tests/test_documents.py::TestDocuments::test_upload_no_file PASSED       [ 87%]
tests/test_documents.py::TestDocuments::test_upload_invalid_file_type PASSED [ 88%]
tests/test_documents.py::TestDocuments::test_upload_no_filename PASSED   [ 90%]
tests/test_documents.py::TestDocuments::test_upload_successful_pdf PASSED [ 91%]
tests/test_documents.py::TestDocuments::test_upload_successful_image PASSED [ 92%]
tests/test_documents.py::TestDocuments::test_upload_s3_credentials_error PASSED [ 94%]
tests/test_documents.py::TestDocuments::test_upload_s3_client_error PASSED [ 95%]
tests/test_documents.py::TestDocuments::test_upload_supported_file_types PASSED [ 97%]
tests/test_documents.py::TestDocuments::test_upload_file_size_validation PASSED [ 98%]
tests/test_documents.py::TestDocuments::test_upload_unsupported_file_types PASSED [100%]

================================== FAILURES ===================================
_____________ TestDoctors.test_create_doctor_patient_unauthorized _____________

self = <tests.test_doctors.TestDoctors object at 0x000002D484B869E0>
client = <starlette.testclient.TestClient object at 0x000002D484F07790>
test_db = <sqlalchemy.orm.session.Session object at 0x000002D484F80410>

    def test_create_doctor_patient_unauthorized(self, client, test_db):
        user, session_token = self.create_authenticated_session(client, test_db)
    
        doctor_data = {
            "name": "Dr. A. Kumar",
            "location": "Delhi"
        }
    
        response = client.post("/api/v1/doctors/", json=doctor_data)
>       assert response.status_code == 401
E       assert 403 == 401
E        +  where 403 = <Response [403 Forbidden]>.status_code

tests\test_doctors.py:56: AssertionError
---------------------------- Captured stdout call -----------------------------
Session issued for user 1: Bamx-8025qlsYRvetlyjDFNlRT1CEEeRn7aPfA_VXfA
___________ TestDoctors.test_get_all_doctors_unauthenticated_denied ___________

self = <tests.test_doctors.TestDoctors object at 0x000002D484CCAE00>
client = <starlette.testclient.TestClient object at 0x000002D484F07680>
test_db = <sqlalchemy.orm.session.Session object at 0x000002D484FD8F50>

    def test_get_all_doctors_unauthenticated_denied(self, client, test_db):
        response = client.get("/api/v1/doctors/")
>       assert response.status_code == 401
E       assert 200 == 401
E        +  where 200 = <Response [200 OK]>.status_code

tests\test_doctors.py:86: AssertionError
_____________ TestDoctors.test_update_doctor_patient_unauthorized _____________

self = <tests.test_doctors.TestDoctors object at 0x000002D484D29A90>
client = <starlette.testclient.TestClient object at 0x000002D484F06E00>
test_db = <sqlalchemy.orm.session.Session object at 0x000002D4850ACF50>

    def test_update_doctor_patient_unauthorized(self, client, test_db):
        self.create_admin_session(client)
    
        doctor_data = {
            "name": "Dr. A. Kumar",
            "location": "Delhi"
        }
        create_response = client.post("/api/v1/doctors/", json=doctor_data)
        doctor_id = create_response.json()["id"]
    
        user, session_token = self.create_authenticated_session(client, test_db)
    
        update_data = {"location": "Mumbai"}
        response = client.put(f"/api/v1/doctors/{doctor_id}", json=update_data)
>       assert response.status_code == 401
E       assert 403 == 401
E        +  where 403 = <Response [403 Forbidden]>.status_code

tests\test_doctors.py:141: AssertionError
---------------------------- Captured stdout call -----------------------------
Session issued for user 1: tiuXYABjwoilVdtRZLyYU7sO_V6OP9K_0HFiQsfekfQ
_____________ TestDoctors.test_delete_doctor_patient_unauthorized _____________

self = <tests.test_doctors.TestDoctors object at 0x000002D484D298B0>
client = <starlette.testclient.TestClient object at 0x000002D484E25480>
test_db = <sqlalchemy.orm.session.Session object at 0x000002D484FDB2F0>

    def test_delete_doctor_patient_unauthorized(self, client, test_db):
        self.create_admin_session(client)
    
        doctor_data = {
            "name": "Dr. A. Kumar",
            "location": "Delhi"
        }
        create_response = client.post("/api/v1/doctors/", json=doctor_data)
        doctor_id = create_response.json()["id"]
    
        user, session_token = self.create_authenticated_session(client, test_db)
    
        response = client.delete(f"/api/v1/doctors/{doctor_id}")
>       assert response.status_code == 401
E       assert 403 == 401
E        +  where 403 = <Response [403 Forbidden]>.status_code

tests\test_doctors.py:156: AssertionError
---------------------------- Captured stdout call -----------------------------
Session issued for user 1: vkyFH7h5GhW9c-4W40QNK1sUMYXiElKdqaAOV5xNKGs
______________ TestEmergencyContacts.test_sos_trigger_successful ______________

self = <tests.test_emergency_contacts.TestEmergencyContacts object at 0x000002D484E10150>
mock_send_emergency = <MagicMock name='send_emergency_message' id='3111786619840'>
client = <starlette.testclient.TestClient object at 0x000002D4850CC380>
test_db = <sqlalchemy.orm.session.Session object at 0x000002D4850D14F0>

    @patch('src.services.sms_service.SMSService.send_emergency_message')
    def test_sos_trigger_successful(self, mock_send_emergency, client, test_db):
        user, session_token = self.create_authenticated_session(client, test_db)
        user_id = user.id
    
        contact1_data = {
            "name": "Emergency Contact 1",
            "relation": "Family",
            "phone": "+919876543210",
            "user_id": user_id
        }
        contact2_data = {
            "name": "Emergency Contact 2",
            "relation": "Friend",
            "phone": "+918765432109",
            "user_id": user_id
        }
    
        client.post("/api/v1/emergency-contacts/", json=contact1_data)
        client.post("/api/v1/emergency-contacts/", json=contact2_data)
    
        mock_send_emergency.return_value = {
            'success': True,
            'message': 'Emergency alert sent via WhatsApp',
            'message_sid': 'test_sid'
        }
    
        sos_data = {"location": "Home", "message": "Help needed!"}
>       response = client.post(f"/api/v1/users/{user_id}/sos/trigger", json=sos_data)

tests\test_emergency_contacts.py:191: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv\Lib\site-packages\starlette\testclient.py:593: in post
    return super().post(
.venv\Lib\site-packages\httpx\_client.py:1144: in post
    return self.request(
.venv\Lib\site-packages\starlette\testclient.py:484: in request
    return super().request(
.venv\Lib\site-packages\httpx\_client.py:825: in request
    return self.send(request, auth=auth, follow_redirects=follow_redirects)
.venv\Lib\site-packages\httpx\_client.py:914: in send
    response = self._send_handling_auth(
.venv\Lib\site-packages\httpx\_client.py:942: in _send_handling_auth
    response = self._send_handling_redirects(
.venv\Lib\site-packages\httpx\_client.py:979: in _send_handling_redirects
    response = self._send_single_request(request)
.venv\Lib\site-packages\httpx\_client.py:1014: in _send_single_request
    response = transport.handle_request(request)
.venv\Lib\site-packages\starlette\testclient.py:377: in handle_request
    raise exc
.venv\Lib\site-packages\starlette\testclient.py:374: in handle_request
    portal.call(self.app, scope, receive, send)
.venv\Lib\site-packages\anyio\from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
C:\Users\muham\AppData\Local\Programs\Python\Python313\Lib\concurrent\futures\_base.py:456: in result
    return self.__get_result()
C:\Users\muham\AppData\Local\Programs\Python\Python313\Lib\concurrent\futures\_base.py:401: in __get_result
    raise self._exception
.venv\Lib\site-packages\anyio\from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
.venv\Lib\site-packages\fastapi\applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
.venv\Lib\site-packages\starlette\applications.py:113: in __call__
    await self.middleware_stack(scope, receive, send)
.venv\Lib\site-packages\starlette\middleware\errors.py:187: in __call__
    raise exc
.venv\Lib\site-packages\starlette\middleware\errors.py:165: in __call__
    await self.app(scope, receive, _send)
.venv\Lib\site-packages\starlette\middleware\cors.py:85: in __call__
    await self.app(scope, receive, send)
.venv\Lib\site-packages\starlette\middleware\exceptions.py:62: in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
.venv\Lib\site-packages\starlette\_exception_handler.py:53: in wrapped_app
    raise exc
.venv\Lib\site-packages\starlette\_exception_handler.py:42: in wrapped_app
    await app(scope, receive, sender)
.venv\Lib\site-packages\starlette\routing.py:715: in __call__
    await self.middleware_stack(scope, receive, send)
.venv\Lib\site-packages\starlette\routing.py:735: in app
    await route.handle(scope, receive, send)
.venv\Lib\site-packages\starlette\routing.py:288: in handle
    await self.app(scope, receive, send)
.venv\Lib\site-packages\starlette\routing.py:76: in app
    await wrap_app_handling_exceptions(app, request)(scope, receive, send)
.venv\Lib\site-packages\starlette\_exception_handler.py:53: in wrapped_app
    raise exc
.venv\Lib\site-packages\starlette\_exception_handler.py:42: in wrapped_app
    await app(scope, receive, sender)
.venv\Lib\site-packages\starlette\routing.py:73: in app
    response = await f(request)
.venv\Lib\site-packages\fastapi\routing.py:301: in app
    raw_response = await run_endpoint_function(
.venv\Lib\site-packages\fastapi\routing.py:214: in run_endpoint_function
    return await run_in_threadpool(dependant.call, **values)
.venv\Lib\site-packages\starlette\concurrency.py:39: in run_in_threadpool
    return await anyio.to_thread.run_sync(func, *args)
.venv\Lib\site-packages\anyio\to_thread.py:56: in run_sync
    return await get_async_backend().run_sync_in_worker_thread(
.venv\Lib\site-packages\anyio\_backends\_asyncio.py:2470: in run_sync_in_worker_thread
    return await future
.venv\Lib\site-packages\anyio\_backends\_asyncio.py:967: in run
    result = context.run(func, *args)
src\api\users.py:88: in trigger_sos
    sms_service = get_sms_service()
src\services\sms_service.py:309: in get_sms_service
    _sms_service_instance = SMSService()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <src.services.sms_service.SMSService object at 0x000002D484EF9160>

    def __init__(self):
        """Initialize Twilio client"""
        if not all([settings.TWILIO_ACCOUNT_SID, settings.TWILIO_AUTH_TOKEN, settings.TWILIO_PHONE_NUMBER]):
>           raise ValueError("Twilio credentials not properly configured. Please set TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN, and TWILIO_PHONE_NUMBER")
E           ValueError: Twilio credentials not properly configured. Please set TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN, and TWILIO_PHONE_NUMBER

src\services\sms_service.py:19: ValueError
---------------------------- Captured stdout call -----------------------------
Session issued for user 1: xa7rwfCITwtEHXBqNTqCCrTweH0EBsSYm14tOBvaGCk
__________ TestEmergencyContacts.test_sos_trigger_sms_service_fails ___________

self = <tests.test_emergency_contacts.TestEmergencyContacts object at 0x000002D484D2B7A0>
mock_send_emergency = <MagicMock name='send_emergency_message' id='3111785946752'>
client = <starlette.testclient.TestClient object at 0x000002D484E25150>
test_db = <sqlalchemy.orm.session.Session object at 0x000002D484F82B70>

    @patch('src.services.sms_service.SMSService.send_emergency_message')
    def test_sos_trigger_sms_service_fails(self, mock_send_emergency, client, test_db):
        user, session_token = self.create_authenticated_session(client, test_db)
        user_id = user.id
    
        contact_data = {
            "name": "Emergency Contact",
            "relation": "Family",
            "phone": "+919876543210",
            "user_id": user_id
        }
        client.post("/api/v1/emergency-contacts/", json=contact_data)
    
        mock_send_emergency.side_effect = Exception("SMS service unavailable")
    
        sos_data = {"location": "Home", "message": "Help needed!"}
>       response = client.post(f"/api/v1/users/{user_id}/sos/trigger", json=sos_data)

tests\test_emergency_contacts.py:229: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv\Lib\site-packages\starlette\testclient.py:593: in post
    return super().post(
.venv\Lib\site-packages\httpx\_client.py:1144: in post
    return self.request(
.venv\Lib\site-packages\starlette\testclient.py:484: in request
    return super().request(
.venv\Lib\site-packages\httpx\_client.py:825: in request
    return self.send(request, auth=auth, follow_redirects=follow_redirects)
.venv\Lib\site-packages\httpx\_client.py:914: in send
    response = self._send_handling_auth(
.venv\Lib\site-packages\httpx\_client.py:942: in _send_handling_auth
    response = self._send_handling_redirects(
.venv\Lib\site-packages\httpx\_client.py:979: in _send_handling_redirects
    response = self._send_single_request(request)
.venv\Lib\site-packages\httpx\_client.py:1014: in _send_single_request
    response = transport.handle_request(request)
.venv\Lib\site-packages\starlette\testclient.py:377: in handle_request
    raise exc
.venv\Lib\site-packages\starlette\testclient.py:374: in handle_request
    portal.call(self.app, scope, receive, send)
.venv\Lib\site-packages\anyio\from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
C:\Users\muham\AppData\Local\Programs\Python\Python313\Lib\concurrent\futures\_base.py:456: in result
    return self.__get_result()
C:\Users\muham\AppData\Local\Programs\Python\Python313\Lib\concurrent\futures\_base.py:401: in __get_result
    raise self._exception
.venv\Lib\site-packages\anyio\from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
.venv\Lib\site-packages\fastapi\applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
.venv\Lib\site-packages\starlette\applications.py:113: in __call__
    await self.middleware_stack(scope, receive, send)
.venv\Lib\site-packages\starlette\middleware\errors.py:187: in __call__
    raise exc
.venv\Lib\site-packages\starlette\middleware\errors.py:165: in __call__
    await self.app(scope, receive, _send)
.venv\Lib\site-packages\starlette\middleware\cors.py:85: in __call__
    await self.app(scope, receive, send)
.venv\Lib\site-packages\starlette\middleware\exceptions.py:62: in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
.venv\Lib\site-packages\starlette\_exception_handler.py:53: in wrapped_app
    raise exc
.venv\Lib\site-packages\starlette\_exception_handler.py:42: in wrapped_app
    await app(scope, receive, sender)
.venv\Lib\site-packages\starlette\routing.py:715: in __call__
    await self.middleware_stack(scope, receive, send)
.venv\Lib\site-packages\starlette\routing.py:735: in app
    await route.handle(scope, receive, send)
.venv\Lib\site-packages\starlette\routing.py:288: in handle
    await self.app(scope, receive, send)
.venv\Lib\site-packages\starlette\routing.py:76: in app
    await wrap_app_handling_exceptions(app, request)(scope, receive, send)
.venv\Lib\site-packages\starlette\_exception_handler.py:53: in wrapped_app
    raise exc
.venv\Lib\site-packages\starlette\_exception_handler.py:42: in wrapped_app
    await app(scope, receive, sender)
.venv\Lib\site-packages\starlette\routing.py:73: in app
    response = await f(request)
.venv\Lib\site-packages\fastapi\routing.py:301: in app
    raw_response = await run_endpoint_function(
.venv\Lib\site-packages\fastapi\routing.py:214: in run_endpoint_function
    return await run_in_threadpool(dependant.call, **values)
.venv\Lib\site-packages\starlette\concurrency.py:39: in run_in_threadpool
    return await anyio.to_thread.run_sync(func, *args)
.venv\Lib\site-packages\anyio\to_thread.py:56: in run_sync
    return await get_async_backend().run_sync_in_worker_thread(
.venv\Lib\site-packages\anyio\_backends\_asyncio.py:2470: in run_sync_in_worker_thread
    return await future
.venv\Lib\site-packages\anyio\_backends\_asyncio.py:967: in run
    result = context.run(func, *args)
src\api\users.py:88: in trigger_sos
    sms_service = get_sms_service()
src\services\sms_service.py:309: in get_sms_service
    _sms_service_instance = SMSService()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <src.services.sms_service.SMSService object at 0x000002D484EF3B10>

    def __init__(self):
        """Initialize Twilio client"""
        if not all([settings.TWILIO_ACCOUNT_SID, settings.TWILIO_AUTH_TOKEN, settings.TWILIO_PHONE_NUMBER]):
>           raise ValueError("Twilio credentials not properly configured. Please set TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN, and TWILIO_PHONE_NUMBER")
E           ValueError: Twilio credentials not properly configured. Please set TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN, and TWILIO_PHONE_NUMBER

src\services\sms_service.py:19: ValueError
---------------------------- Captured stdout call -----------------------------
Session issued for user 1: 5pvcusUetY9cH0aS6pvG7e7q9BL2_sEF0nNvQDRxbRA
_____ TestMedicines.test_get_medicines_by_user_unauthorized_access_denied _____

self = <tests.test_medicines.TestMedicines object at 0x000002D484E248D0>
client = <starlette.testclient.TestClient object at 0x000002D484F06E00>
test_db = <sqlalchemy.orm.session.Session object at 0x000002D4850D3200>

    def test_get_medicines_by_user_unauthorized_access_denied(self, client, test_db):
        user_id = self.create_user(test_db)
    
        response = client.get(f"/api/v1/medicines/user/{user_id}")
>       assert response.status_code == 401
E       assert 200 == 401
E        +  where 200 = <Response [200 OK]>.status_code

tests\test_medicines.py:134: AssertionError
__________ TestMedicines.test_transcribe_audio_prescription_success ___________

self = <tests.test_medicines.TestMedicines object at 0x000002D484D2BC50>
client = <starlette.testclient.TestClient object at 0x000002D484FC6CF0>
test_db = <sqlalchemy.orm.session.Session object at 0x000002D484FDAD50>

    def test_transcribe_audio_prescription_success(self, client, test_db):
        """Test real AI service with actual audio transcription - NO MOCKING"""
        user, session_token = self.create_authenticated_session(client, test_db)
    
        # Use real audio data or synthetic audio for testing
        audio_content = b"fake_audio_data_representing_real_prescription"
        audio_file = io.BytesIO(audio_content)
    
        response = client.post(
            "/api/v1/medicines/transcribe",
            files={"file": ("prescription.mp3", audio_file, "audio/mpeg")}
        )
    
        # Test actual AI service response structure
>       assert response.status_code == 200
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests\test_medicines.py:253: AssertionError
---------------------------- Captured stdout call -----------------------------
Session issued for user 1: cuGv6PN5rZkj3nyEpUb7wzV7I8UP-T7NbRPC3DlVoc0
_______________ TestMedicines.test_transcribe_empty_audio_file ________________

self = <tests.test_medicines.TestMedicines object at 0x000002D484D81010>
client = <starlette.testclient.TestClient object at 0x000002D48516DF20>
test_db = <sqlalchemy.orm.session.Session object at 0x000002D4851D0B90>

    def test_transcribe_empty_audio_file(self, client, test_db):
        user, session_token = self.create_authenticated_session(client, test_db)
    
        empty_audio = io.BytesIO(b"")
    
        response = client.post(
            "/api/v1/medicines/transcribe",
            files={"file": ("empty.wav", empty_audio, "audio/wav")}
        )
    
        # Test real AI service behavior with empty file
        # Should return 400 (invalid input) - empty audio file is bad request
>       assert response.status_code == 400
E       assert 500 == 400
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests\test_medicines.py:309: AssertionError
---------------------------- Captured stdout call -----------------------------
Session issued for user 1: Lwc857lw6uPZcVIvtMnIFa7tZQvxilUchFpP75Nzx2A
____________ TestMedicines.test_transcribe_different_audio_formats ____________

self = <tests.test_medicines.TestMedicines object at 0x000002D484D77330>
client = <starlette.testclient.TestClient object at 0x000002D48516E470>
test_db = <sqlalchemy.orm.session.Session object at 0x000002D4851D0D70>

    def test_transcribe_different_audio_formats(self, client, test_db):
        """Test real AI service with different audio formats - NO MOCKING"""
        user, session_token = self.create_authenticated_session(client, test_db)
    
        # Test the most common format first (mp3) with real AI service
        audio_content = b"fake_audio_data_for_mp3_format"
        audio_file = io.BytesIO(audio_content)
    
        response = client.post(
            "/api/v1/medicines/transcribe",
            files={"file": ("test.mp3", audio_file, "audio/mpeg")}
        )
    
        # Test real AI service response
>       assert response.status_code == 200
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests\test_medicines.py:375: AssertionError
---------------------------- Captured stdout call -----------------------------
Session issued for user 1: iPUlVzrzmwUcmeWWCKb2hlBbW5PTppFRrbg5SglRWfc
============================== warnings summary ===============================
.venv\Lib\site-packages\pydantic\fields.py:1093: 139 warnings
  C:\Users\muham\OneDrive\Desktop\Environments\SE_Project\backend\.venv\Lib\site-packages\pydantic\fields.py:1093: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/
    warn(

.venv\Lib\site-packages\pydantic\_internal\_config.py:323: 17 warnings
  C:\Users\muham\OneDrive\Desktop\Environments\SE_Project\backend\.venv\Lib\site-packages\pydantic\_internal\_config.py:323: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/
    warnings.warn(DEPRECATION_MESSAGE, DeprecationWarning)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
FAILED tests/test_doctors.py::TestDoctors::test_create_doctor_patient_unauthorized
FAILED tests/test_doctors.py::TestDoctors::test_get_all_doctors_unauthenticated_denied
FAILED tests/test_doctors.py::TestDoctors::test_update_doctor_patient_unauthorized
FAILED tests/test_doctors.py::TestDoctors::test_delete_doctor_patient_unauthorized
FAILED tests/test_emergency_contacts.py::TestEmergencyContacts::test_sos_trigger_successful
FAILED tests/test_emergency_contacts.py::TestEmergencyContacts::test_sos_trigger_sms_service_fails
FAILED tests/test_medicines.py::TestMedicines::test_get_medicines_by_user_unauthorized_access_denied
FAILED tests/test_medicines.py::TestMedicines::test_transcribe_audio_prescription_success
FAILED tests/test_medicines.py::TestMedicines::test_transcribe_empty_audio_file
FAILED tests/test_medicines.py::TestMedicines::test_transcribe_different_audio_formats
================ 10 failed, 61 passed, 156 warnings in 37.27s =================
